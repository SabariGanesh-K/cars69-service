// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cars.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const addImagesToCar = `-- name: AddImagesToCar :one
UPDATE cars
SET  images= $2
where id=$1
RETURNING id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username
`

type AddImagesToCarParams struct {
	ID     int32    `json:"id"`
	Images []string `json:"images"`
}

func (q *Queries) AddImagesToCar(ctx context.Context, arg AddImagesToCarParams) (Cars, error) {
	row := q.db.QueryRowContext(ctx, addImagesToCar, arg.ID, pq.Array(arg.Images))
	var i Cars
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ModelID,
		&i.ModelName,
		&i.OwnerID,
		&i.Color,
		&i.Description,
		pq.Array(&i.Tags),
		pq.Array(&i.Images),
		pq.Array(&i.Metadata),
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.ListingStatus,
		&i.OwnerUsername,
	)
	return i, err
}

const createCar = `-- name: CreateCar :one
INSERT INTO cars (
  id ,
  owner_id,
  title ,
  model_id ,
  color ,
  model_name,
  description,
  tags,
  listing_status,
  images,
  owner_username
) VALUES (
  $1, $2, $3, $4,$5,$6,$7,$8,$9,$10,$11
) RETURNING id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username
`

type CreateCarParams struct {
	ID            int32    `json:"id"`
	OwnerID       int32    `json:"owner_id"`
	Title         string   `json:"title"`
	ModelID       string   `json:"model_id"`
	Color         string   `json:"color"`
	ModelName     string   `json:"model_name"`
	Description   string   `json:"description"`
	Tags          []string `json:"tags"`
	ListingStatus string   `json:"listing_status"`
	Images        []string `json:"images"`
	OwnerUsername string   `json:"owner_username"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Cars, error) {
	row := q.db.QueryRowContext(ctx, createCar,
		arg.ID,
		arg.OwnerID,
		arg.Title,
		arg.ModelID,
		arg.Color,
		arg.ModelName,
		arg.Description,
		pq.Array(arg.Tags),
		arg.ListingStatus,
		pq.Array(arg.Images),
		arg.OwnerUsername,
	)
	var i Cars
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ModelID,
		&i.ModelName,
		&i.OwnerID,
		&i.Color,
		&i.Description,
		pq.Array(&i.Tags),
		pq.Array(&i.Images),
		pq.Array(&i.Metadata),
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.ListingStatus,
		&i.OwnerUsername,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars
where id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCar, id)
	return err
}

const getCarById = `-- name: GetCarById :one
SELECT id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username FROM cars where id = $1
`

func (q *Queries) GetCarById(ctx context.Context, id int32) (Cars, error) {
	row := q.db.QueryRowContext(ctx, getCarById, id)
	var i Cars
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ModelID,
		&i.ModelName,
		&i.OwnerID,
		&i.Color,
		&i.Description,
		pq.Array(&i.Tags),
		pq.Array(&i.Images),
		pq.Array(&i.Metadata),
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.ListingStatus,
		&i.OwnerUsername,
	)
	return i, err
}

const getUserOwnedCars = `-- name: GetUserOwnedCars :many
SELECT id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username
from cars 
where owner_id = $1
`

func (q *Queries) GetUserOwnedCars(ctx context.Context, ownerID int32) ([]Cars, error) {
	rows, err := q.db.QueryContext(ctx, getUserOwnedCars, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cars
	for rows.Next() {
		var i Cars
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ModelID,
			&i.ModelName,
			&i.OwnerID,
			&i.Color,
			&i.Description,
			pq.Array(&i.Tags),
			pq.Array(&i.Images),
			pq.Array(&i.Metadata),
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.ListingStatus,
			&i.OwnerUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCarsFTS = `-- name: SearchCarsFTS :many
SELECT id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username
FROM cars
WHERE 
ID != $1 AND 
    lower(title) LIKE '%' || $2 || '%'
    OR lower(description) LIKE '%' || $2 || '%'
    OR lower(model_name) LIKE '%' || $2 || '%'
    OR lower(model_id) LIKE '%' || $2 || '%'
    OR lower(color) LIKE '%' ||  $2 || '%'
    OR $2 = ANY(tags)
OFFSET $3
LIMIT $4
`

type SearchCarsFTSParams struct {
	ID      int32          `json:"id"`
	Column2 sql.NullString `json:"column_2"`
	Offset  int32          `json:"offset"`
	Limit   int32          `json:"limit"`
}

// go-type: title string
// go-type: description string
// go-type: model_name string
// go-type: model_id string
// go-type: color string
// go-type: tags []string
func (q *Queries) SearchCarsFTS(ctx context.Context, arg SearchCarsFTSParams) ([]Cars, error) {
	rows, err := q.db.QueryContext(ctx, searchCarsFTS,
		arg.ID,
		arg.Column2,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cars
	for rows.Next() {
		var i Cars
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ModelID,
			&i.ModelName,
			&i.OwnerID,
			&i.Color,
			&i.Description,
			pq.Array(&i.Tags),
			pq.Array(&i.Images),
			pq.Array(&i.Metadata),
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.ListingStatus,
			&i.OwnerUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCar = `-- name: UpdateCar :one
UPDATE cars
SET
  title = COALESCE($1, title),
  tags = COALESCE($2, tags),
  listing_status = COALESCE($3, listing_status),
  description = COALESCE($4, description),
  color = COALESCE($5, color),
  model_id = COALESCE($6, model_id),
  images = COALESCE($7, images),

  model_name = COALESCE($8, model_name)
  

WHERE
  id = $9
RETURNING id, title, model_id, model_name, owner_id, color, description, tags, images, metadata, created_at, modified_at, listing_status, owner_username
`

type UpdateCarParams struct {
	Title        string `json:"title"`
	Tags          []string       `json:"tags"`
	ListingStatus string `json:"listing_status"`
	Description  string `json:"description"`
	Color        string `json:"color"`
	ModelID      string `json:"model_id"`
	Images        []string       `json:"images"`
	ModelName    string `json:"model_name"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) (Cars, error) {
	row := q.db.QueryRowContext(ctx, updateCar,
		arg.Title,
		pq.Array(arg.Tags),
		arg.ListingStatus,
		arg.Description,
		arg.Color,
		arg.ModelID,
		pq.Array(arg.Images),
		arg.ModelName,
		arg.ID,
	)
	var i Cars
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ModelID,
		&i.ModelName,
		&i.OwnerID,
		&i.Color,
		&i.Description,
		pq.Array(&i.Tags),
		pq.Array(&i.Images),
		pq.Array(&i.Metadata),
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.ListingStatus,
		&i.OwnerUsername,
	)
	return i, err
}
